# Build with:
# > docker build -f Dockerfile.nfs -t boot2docker-nfs-img .
# > docker run --rm boot2docker-nfs-img > boot2docker-nfs.iso
#
# Test with:
# > docker-machine create --driver vmwarefusion \
#       --vmwarefusion-boot2docker-url=./boot2docker-nfs.iso b2d-nfs-test
#
FROM boot2docker/boot2docker
MAINTAINER Mark Eissler

ADD . $ROOTFS/data/

# Fix nfs-client init.d file for checking status
COPY rootfs/rootfs/usr/local/etc/init.d/nfs-client "$ROOTFS/usr/local/etc/init.d/nfs-client"

# Add rc.d script for nfs-client
RUN printf '#!/bin/sh\n\n\
/usr/local/etc/init.d/nfs-client start\n'\
>> $ROOTFS/etc/rc.d/nfs-client \
&& chmod +x "$ROOTFS/etc/rc.d/nfs-client"

RUN ln -svT /usr/local/etc/init.d/nfs-client "$ROOTFS/etc/init.d/nfs-client"

# Copy updated rootfs init.d
COPY rootfs/rootfs/etc/init.d/tc-config "$ROOTFS/etc/init.d/tc-config"
COPY rootfs/rootfs/etc/init.d/rcS "$ROOTFS/etc/init.d/rcS"

# Copy updated rootfs rc.d
COPY rootfs/rootfs/etc/rc.d/tce-loader "$ROOTFS/etc/rc.d/tce-loader"

# Make sure init scripts are executable
RUN find "$ROOTFS/etc/rc.d/" \
    "$ROOTFS/etc/init.d/" \
    "$ROOTFS/usr/local/etc/init.d/nfs-client" -type f -exec chmod --changes +x '{}' +

# Copy updated boot params
COPY rootfs/isolinux/isolinux.cfg /tmp/iso/boot/isolinux/isolinux.cfg

# Copy updated bootscript
COPY rootfs/rootfs/opt/bootscript.sh "$ROOTFS/opt/bootscript.sh"

# Make sure scripts in opt are executable
RUN find "$ROOTFS/opt/" -type f -name "*.sh" -exec chmod --changes +x '{}' +

# Copy updated sysctl.conf (to fix segfault for...
#   "cannot stat /proc/sys/net/ipv6/conf/all/forwarding: No such file or directory"
COPY rootfs/rootfs/etc/sysctl.conf "$ROOTFS/etc/sysctl.conf"

# Patch VERSION to include 'nfs'
RUN set -ex; \
	version_nfs="$(sed '1s/^\([0-9]*\.[0-9]*\.[0-9]*\)\(\(-[A-Za-z0-9]*\)*\)/\1-nfs\2/' "$ROOTFS/etc/version")"; \
    echo "$version_nfs" > "$ROOTFS/etc/version"

# Add logrotate dependencies to TinyCore
ENV TCL_REPO_BASE   http://distro.ibiblio.org/tinycorelinux/7.x/x86_64
ENV TCZ_DEPS        popt-dev popt

# Install the TCZ dependencies
RUN set -ex; \
	for dep in $TCZ_DEPS; do \
		echo "Download $TCL_REPO_BASE/tcz/$dep.tcz"; \
		curl -fSL -o "/tmp/$dep.tcz" "$TCL_REPO_BASE/tcz/$dep.tcz"; \
		unsquashfs -f -d "$ROOTFS" "/tmp/$dep.tcz"; \
		rm -f "/tmp/$dep.tcz"; \
	done

# Install build dependencies for logrotate
RUN apt-get update && apt-get install -y \
        libpopt-dev \
        xz-utils \
    && rm -rf /var/lib/apt/lists/*

# Build and install logrotate
ENV LOGROTATE_REPO    https://github.com/logrotate/logrotate.git
ENV LOGROTATE_TAG     r3-9-1
RUN set -ex \
	&& git clone -b "$LOGROTATE_TAG" "$LOGROTATE_REPO" /logrotate \
    && cd /logrotate \
    && touch NEWS README AUTHORS ChangeLog \
    && autoreconf -fiv \
    && ./configure --without-selinux \
    && make \
    && make DESTDIR="$ROOTFS" install

# Configure logrotate
COPY rootfs/rootfs/usr/local/etc/logrotate.conf "$ROOTFS/usr/local/etc/logrotate.conf"
COPY rootfs/rootfs/usr/local/etc/logrotate.d "$ROOTFS/usr/local/etc/logrotate.d"
RUN chmod 0644 "$ROOTFS/usr/local/etc/logrotate.conf" \
    && chmod 0755 "$ROOTFS/usr/local/etc/logrotate.d" \
    && find "$ROOTFS/usr/local/etc/logrotate.d" -type f -exec chmod --changes 0644 '{}' +

# Setup crontab
COPY rootfs/rootfs/etc/crontab "$ROOTFS/etc/crontab"
RUN chmod 0644 "$ROOTFS/etc/crontab"

# Update version for iso
RUN cp -v "$ROOTFS/etc/version" /tmp/iso/version

# Update make_iso script
COPY rootfs/make_iso.sh /tmp/make_iso.sh

# Build iso
RUN /tmp/make_iso.sh

CMD ["cat", "boot2docker.iso"]
